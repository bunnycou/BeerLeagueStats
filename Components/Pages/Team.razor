@page "/team/{season}/{teamAbbr}"
@using RiotMatchData

<PageTitle>@teamAbbr</PageTitle>

@if (status == "loading")
{
    <h4>Loading...</h4>
} else if (status == "error")
{
    <h4>Error</h4>
}
else
{
    <h3>@team.name <a href="@opggmulti()" target="_blank"><img src="/assets/opgg.webp" /></a></h3>
    <h4>Season @season | @team.seriesWR()% (@team.seriesWin/@team.seriesLoss) Series WR</h4>
    <h5>Players</h5>
    <table>
        @foreach (var role in roles)
        {
            @foreach (var player in playersByRole[role])
            {
                <tr>
                    <td>
                        <a href="/player/@player[0]">@player[0]</a>
                    </td>
                    <td>
                        <img src="/assets/roles/@(role).webp" class="role" />
                    </td>
                </tr>
            }
        }
    </table>
    <br />
    <h5>Recent Series</h5>
    <table>
        @foreach (var series in team.seriesList.OrderByDescending(x => x[0]))
        {
            <tr>
                <td class="@WinOrLoss(series[2])">
                    <a href="/series/@series[0]">@series[1]</a>
                </td>
            </tr>
        }
    </table>
}

@code {
    [Parameter]
    public string teamAbbr { get; set; }
    [Parameter]
    public string season { get; set; }

    private List<List<string>> playerList = new(); // id, name, tag
    private Dictionary<string, List<List<string>>> playersByRole = new(); // Top[0]-Sup[4+] (subs are mixed in)
    private TeamData team;

    string[] roles = { "top", "jg", "mid", "bot", "sup" };

    private string status = "loading";

    protected override Task OnInitializedAsync()
    {
        team = new TeamData(teamAbbr, season);

        playerList = Database.dbquery("SELECT Players.puuid, Players.name, Players.tag FROM Players " +
            "INNER JOIN PlayerTeam ON PlayerTeam.puuid = Players.puuid " +
            "INNER JOIN Teams ON Teams.teamId = PlayerTeam.teamId " +
            $"WHERE Teams.abbreviation = '{teamAbbr}'");
        playersByRole = sortPlayerRoles();

        status = "done";

        return base.OnInitializedAsync();
    }

    private Dictionary<string, List<List<string>>> sortPlayerRoles()
    {
        Dictionary<string, List<List<string>>> roles = new();
        roles.Add("top", new List<List<string>>());
        roles.Add("jg", new List<List<string>>());
        roles.Add("mid", new List<List<string>>());
        roles.Add("bot", new List<List<string>>());
        roles.Add("sup", new List<List<string>>());

        foreach(var row in playerList)
        {
            var puuid = row[0];
            var name = row[1];
            var tag = row[2];

            roles[Utility.determineRole(puuid)].Add(new List<string> { name, tag });
        }

        return roles;
    }

    private string opggmulti()
    {
        var hash = "%23";
        var comma = "%2C";

        var url = "https://www.op.gg/multisearch/na?summoners=";

        foreach (var role in roles) // this doesn't do anything but I am keeping it
        {
            foreach (var player in playersByRole[role])
            {
                url += $"{player[0]}{hash}{player[1]}{comma}";
            }
        }



        return url.Substring(0, url.Length - 3);
    }

    private string WinOrLoss(string abbr)
    {
        if (abbr == "null") { return "none"; }
        if (abbr == teamAbbr) { return "win"; } else { return "loss"; }
    }
}
